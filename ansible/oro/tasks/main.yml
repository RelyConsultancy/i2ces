- name: Create php link
  file: src=/usr/bin/php56 dest=/usr/bin/php state=link

- name: Make sure there is no wrong php.ini file
  file: path=/etc/php.ini state=absent

- name: Create php.ini link
  file: src=/opt/remi/php56/root/etc/php.ini dest=/etc/php.ini state=link

- name: set SELinux to permissive
  action: selinux policy=targeted state=permissive

- name: Check if Oro Platform is installed.
  stat: "path=/var/www/html/composer.lock"
  register: composer_locked

- name: Debug composer_locked
  debug: msg="Variable 'composer_locked' is set to {{ composer_locked }}"

- name: Upgrade dependencies
  command: " {{ item }} "
  with_items:
    - /usr/local/bin/composer update -d /var/www/html -n --prefer-dist --no-scripts
  when: composer_locked.stat.exists

- name: Copy vhost
  template: src=i2ces.conf.j2 dest=/etc/httpd/conf.d/i2ces.conf mode=0644
  notify: restart apache

- name: Install node
  shell: >
    sudo yum -y install npm
    creates: /usr/bin/node

- name: Check if web/uploads folder exists.
  stat: "path=/var/www/html/web/uploads"
  register: uploads_exists

- name: Create web/uploads folder.
  file: path=/var/www/html/web/uploads state=directory mode=0755
  when: not uploads_exists.stat.exists

- name: Check if web/bundles folder exists.
  stat: "path=/var/www/html/web/bundles"
  register: bundles_exists

- name: Create web/bundles folder.
  file: path=/var/www/html/web/bundles state=directory mode=0755
  when: not bundles_exists.stat.exists

- name: Maxxed out composer timeout
  shell: >
    export COMPOSER_PROCESS_TIMEOUT=3000

- name: Fetch Oro Platform
  command: " {{item}} "
  with_items:
    - /usr/local/bin/composer install -d /var/www/html -n --prefer-dist --no-scripts

- name: Install and set permissions
  command: " {{item}} "
  with_items:
    - /usr/local/bin/composer install -d /var/www/html -n --prefer-dist
    - chmod 777 /var/www/html/web/uploads
    - sudo chmod 777 /var/www/html/app/logs
    - sudo chmod 777 /var/www/html/app/attachment
    - sudo chmod 777 /var/www/html/app/config/parameters.yml
    - sudo chmod -R 777 /var/www/html/app/cache
    - sudo chmod -R 777 /var/www/html/app/logs
    - sudo chmod -R 777 /var/www/html/web/bundles/
    - mysql -uroot -proot -e "create database IF NOT EXISTS i2c"
- set_fact: colon=":"

- name: Update ORO db pass
  lineinfile: dest=/var/www/html/app/config/parameters.yml regexp='(database_password:\ null)' line="    database_password{{colon}} root"

- name: New Parameters.yml
  template: src=parameters.yml dest=/var/www/html/app/config/parameters.yml force=yes

- name: Install Oro Platform
  command: chdir=/var/www/html php ./app/console oro:install --application-url {{url_base}} --organization-name {{database_name}} --user-name {{master_user}} --user-email {{master_email}} --user-firstname {{master_first_name}} --user-lastname {{master_last_name}} --user-password {{master_pass}} --drop-database --sample-data no --force -n
  # when: not composer_locked.stat.exists

- name: Clear cache
  command: chdir=/var/www/html php app/console cache:clear --env=prod

- name: Check if src/i2c/DashboardBundle/Resources/public folder exists.
  stat: "path=/var/www/html/src/i2c/DashboardBundle/Resources/public"
  register: dashboard_public_exists

- name: Debug dashboard_public_exists
  debug: msg="Variable 'dashboard_public_exists' is set to {{ dashboard_public_exists }}"

- name: Check if web/bundles/i2cdashboard folder exists.
  stat: "path=/var/www/html/web/bundles/i2cdashboard"
  register: web_dashboard_exists

- name: Debug web_dashboard_public_exists
  debug: msg="Variable 'web_dashboard_public_exists' is set to {{ web_dashboard_public_exists }}"

- name: Create backend web dirs for frontend integration
  file:  path="{{ item }}" state=directory mode=0775
  with_items:
    - /var/www/html/web/bundles/i2cdashboard
    - /var/www/html/web/bundles/i2cdashboard/js
  when: not dashboard_public_exists.stat.exists

- name: Create backend dirs for frontend integration
  file:  path="{{ item }}" state=directory mode=0775
  with_items:
    - /var/www/html/src/i2c/DashboardBundle/Resources/public
    - /var/www/html/src/i2c/DashboardBundle/Resources/public/js
    - /var/www/html/src/i2c/DashboardBundle/Resources/public/css
  when: not dashboard_public_exists.stat.exists

- name: Check if web/fonts folder exists.
  stat: "path=/var/www/html/web/fonts"
  register: web_fonts_exists

- name: Debug web_fonts_exists
  debug: msg="Variable 'web_fonts_exists' is set to {{ web_fonts_exists }}"

- name: Create web dirs for frontend integration
  file:  path="{{ item }}" state=directory mode=0775
  with_items:
    - /var/www/html/web/fonts
    - /var/www/html/web/images
  when: not web_fonts_exists.stat.exists

- name: Integrate bundles.js from frontend to backend
  copy: src=../frontend/public/assets/bundle.js dest=/var/www/html/src/i2c/DashboardBundle/Resources/public/js/index.js force=yes

- name: Integrate bundles.js from frontend to web folder
  copy: src=../frontend/public/assets/bundle.js dest=/var/www/html/web/bundles/i2cdashboard/js/index.js force=yes

- name: Integrate bundles.css from frontend to backend
  copy: src=../frontend/public/assets/bundle.css dest=/var/www/html/src/i2c/DashboardBundle/Resources/public/css/index.css force=yes

- name: Integrate bundles.css from frontend to web folder
  copy: src=../frontend/public/assets/bundle.css dest=/var/www/html/web/css/index.css force=yes

- name: Integrate fonts from frontend to backend
  copy: src=../frontend/public/fonts dest=/var/www/html/web/fonts force=yes

- name: Integrate images from frontend to backend
  copy: src=../frontend/public/images dest=/var/www/html/web/images force=yes

- name: Install assets
  command: chdir=/var/www/html php app/console asset:install --env=prod

- name: Dump assets
  command: chdir=/var/www/html php app/console assetic:dump --env=prod

- name: Update the database
  command: chdir=/var/www/html php app/console i2c:schema:update --version-number=1
  become_user: root

- name: Load custom entities into oro-crm
  command: chdir=/var/www/html php app/console oro:entity-config:update -f

- name: Apply oro migrations
  command: chdir=/var/www/html php app/console oro:migration:load --force
  become_user: root

- name: Create new translations for the oro dashboard
  command: chdir=/var/www/html php app/console oro:translation:dump en
  become_user: root

- name: Create initial data
  command: chdir=/var/www/html php app/console i2c:initial-setup
  become_user: root

- name: Create production cache
  command: chdir=/var/www/html php app/console cache:clear --env=prod --no-debug
  become_user: root
